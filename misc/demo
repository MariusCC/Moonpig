#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';

use Moonpig::Logger '$Logger' => { init => {
  ident     => 'Moonpig::Demo',
  to_stdout => 1,
  log_pid   => 0,
  prefix    => '* ',
} };

use Moonpig::Env::Test;

use Moonpig::Events::Handler::Code;
use Moonpig::Events::Handler::Noop;

use Moonpig::Util qw(class dollars);

# 1. create ledger

my $contact = class('Contact')->new({
  name => 'J. Fred Bloggs',
  email_addresses => [ 'jfred@example.com' ],
});

my $ledger = class('Ledger')->new({
  contact => $contact,
});

# 2. create consumer

my $consumer = $ledger->add_consumer(
  class(qw(Consumer)),
  {
    replacement_mri => Moonpig::URI->nothing(),
  },
);

# 3. charge, finalize, send invoice

my $invoice = $ledger->current_invoice;

my $charge = $invoice->add_charge_at(
  class('Charge::Bankable')->new({
    description => 'test charge (setup)',
    amount      => dollars(10),
    consumer    => $consumer,
  }),
  'test.charges.setup',
);

$invoice->finalize_and_send;

# 4. pay and apply payment to invoice

$ledger->add_credit(
  class(qw(Credit::Simulated)),
  { amount => $invoice->total_amount },
);

$ledger->process_credits;

# 5. create and link bank to consumer

  # implicit in combination of invoice's handler and credit processing

# 6. heartbeats, until...
# 7. consumer charges bank
# 8. until low-funds, goto 6
# 9. setup replacement
# 10. funds expire
# 11a. fail over (if replacement funded)
# 11b. cancel account (if replacement unfunded)
