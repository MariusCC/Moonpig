#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';

use Moonpig::Logger '$Logger' => { init => {
  ident     => 'Moonpig::Demo',
  to_stdout => 1,
  log_pid   => 0,
  prefix    => '* ',
} };

use Moonpig::Env::Test;

use Moonpig::Events::Handler::Code;

use List::Util qw(sum);
use Moonpig::Util qw(class days dollars event);

Moonpig->env->register_event_handler(
  'send-email',
  'log-email',
  Moonpig::Events::Handler::Code->new({
    code => sub {
      $Logger->log("sent email");
    },
  }),
);

Moonpig->env->stop_time;

# 1. create ledger

my $contact = class('Contact')->new({
  name => 'J. Fred Bloggs',
  email_addresses => [ 'jfred@example.com' ],
});

my $ledger = class('Ledger')->new({
  contact => $contact,
});

# 2. create consumer

my $service_uri = 'yoyodyne://account/1234';

my $consumer = $ledger->add_consumer(
  class(qw(Consumer::ByTime)),
  {
    cost_amount        => dollars(50),
    cost_period        => 364 * 86400,
    charge_frequency   =>   7 * 86400, # less frequent to make logs simpler
    charge_description => 'yoyodyne service',
    old_age            =>  30 * 86400,
    charge_path_prefix => 'yoyodyne.basic',
    grace_until        => Moonpig->env->now + days(3),

    service_uri        => $service_uri,
    service_active     => 1,

    # XXX: I have NFI what to do here, yet. -- rjbs, 2011-01-12
    replacement_mri    => Moonpig::URI->new(
      "moonpig://test/method?method=construct_replacement"
    ),
  },
);

# 3. charge, finalize, send invoice
# 4. pay and apply payment to invoice
# 5. create and link bank to consumer
# 6. heartbeats, until...
# 7. consumer charges bank
# 8. until low-funds, goto 6
# 9. setup replacement
# 10. funds expire
# 11a. fail over (if replacement funded)
# 11b. cancel account (if replacement unfunded)

my $invoices_to_pay = 2;

for (1 .. 760) {
  $Logger->log([ 'TICK: %s', q{} . Moonpig->env->now ]) if $_ % 30 == 0;

  $ledger->handle_event( event('heartbeat') );

  if ($_ % 30 == 0) {
    if (my @consumers = $ledger->active_consumers_for_service($service_uri)) {
      die "multiple consumers!?!?" if @consumers > 1;

      my $consumer = $consumers[0];
      $Logger->log([ "CURRENTLY ACTIVE: %s", $consumer->ident ]);

      if (my $bank = $consumer->bank) {
        $Logger->log([
          "%s still has %s in it",
          $consumer->bank->ident,
          $consumer->bank->unapplied_amount,
        ]);
      } else {
        $Logger->log([
          "%s is still without a bank",
          $consumer->ident,
        ]);
      }
    }
  }

  if (
    $invoices_to_pay
    and
    grep { ! $_->is_open and ! $_->is_paid } $ledger->invoices
  ) {
    # There are unpaid invoices!
    my $last_rfp = $ledger->last_request_for_payment;

    # 4. pay and apply payment to invoice

    my $total = sum map { $_->total_amount } $last_rfp->invoices;

    $ledger->add_credit(
      class(qw(Credit::Simulated)),
      { amount => $total },
    );

    $ledger->process_credits;

    $invoices_to_pay--;
    $Logger->('...');
  }

  Moonpig->env->elapse_time(86400);
}

