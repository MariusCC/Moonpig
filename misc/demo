#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';

use Moonpig::Logger '$Logger' => { init => {
  ident     => 'Moonpig::Demo',
  to_stdout => 1,
  log_pid   => 0,
  prefix    => '* ',
} };

use Moonpig::Env::Test;

use Moonpig::Events::Handler::Code;
use Moonpig::Events::Handler::Noop;

use List::Util qw(sum);
use Moonpig::Util qw(class days dollars event);

Moonpig->env->stop_time;

# 1. create ledger

my $contact = class('Contact')->new({
  name => 'J. Fred Bloggs',
  email_addresses => [ 'jfred@example.com' ],
});

my $ledger = class('Ledger')->new({
  contact => $contact,
});

# 2. create consumer

my $consumer = $ledger->add_consumer(
  class(qw(Consumer::ByTime)),
  {
    cost_amount        => dollars(50),
    cost_period        => 364 * 86400,
    charge_frequency   =>   7 * 86400, # less frequent to make logs simpler
    charge_description => 'yoyodyne service',
    old_age            =>  30 * 86400,
    charge_path_prefix => 'yoyodyne.basic',
    grace_until        => Moonpig->env->now + days(3),

    service_uri        => 'yoyodyne://account/1234',
    service_active     => 1,

    # XXX: I have NFI what to do here, yet. -- rjbs, 2011-01-12
    replacement_mri    => Moonpig::URI->new(
      "moonpig://test/method?method=construct_replacement"
    ),
  },
);

# 3. charge, finalize, send invoice

  # We send a heartbeat, which lets the invoice perform dunning, picking up the
  # invoice that was charged by virtue of the ByTime consumer's creation.

$ledger->handle_event( event('heartbeat') );

my $last_rfp = $ledger->last_request_for_payment;

# 4. pay and apply payment to invoice

my $total   = sum map { $_->total_amount } $last_rfp->invoices;

$ledger->add_credit(
  class(qw(Credit::Simulated)),
  { amount => $total },
);

$ledger->process_credits;

# 5. create and link bank to consumer

  # implicit in combination of invoice's handler and credit processing

# 6. heartbeats, until...
# 7. consumer charges bank
# 8. until low-funds, goto 6
# 9. setup replacement
# 10. funds expire
# 11a. fail over (if replacement funded)
# 11b. cancel account (if replacement unfunded)

for (1 .. 24) {
  $ledger->handle_event( event('heartbeat') );

  $Logger->log([
    "%s still has %s in it",
    $consumer->bank->ident,
    $consumer->bank->unapplied_amount,
  ]);

  Moonpig->env->elapse_time(30 * 86400);
}

