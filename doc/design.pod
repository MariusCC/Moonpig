
=head1 Moonpig design

=head2 Basic entities

=head3 Ledger

A ledger wraps up an account history.  It contains the entire history
number of piggy banks, consumers, journals, and invoices.  It also singles out
the currently-active piggy banks and consumers, the current "general fund"
piggy bank, if there is one, and the current invoice.  It also
contains contact information for the account.

=head3 Contact

Email addresses, postal addresses, credit card numbers (or proxies for
credit card numbers.)

=head3 Invoice

An invoice represents list of unpaid charges that the owner of the
account will be asked to pay.  Its implementation is as the head of a
charge tree.

An invoice can be asked to provide a printable representation of itself, which
will include summaries of prior open invoices as line items.  The printable
representations may decide, at each level of the cost tree, to present a single
subtotal item, or descend the tree to the next level to list the sub-items.

=head3 Journal

A journal represents a summary of transfers made from banks to consumers over a
span of time.  It is represented as the head of a cost tree.  A journal can be
marked as closed, at which time new transfers will be recorded on a new
journal.

=head3 Piggy bank

A piggy bank represents a pool of funds converted from a credit or customer
payment, and generally associated with a consumer.  The consumer will perform
transfers as needed to pay for its continued operation.  A piggy bank may be a
"general fund", not associated with any consumer but available to any consumer
whose associated piggy bank is insufficient to cover its demands.

[ Are general funds still a good idea, compared to refundable credit? -- rjbs,
2010-12-07 ]

The piggy bank has some initial value, corresponding to the amount received on
payment.  At any given moment, it has as much remaining value as its initial
value minus and transfers or holds.

=head3 Consumer

A consumer represents a service for which a consumer pays.  At present there
appear to be three sorts: periodically assessed services; pay-as-you-go
services, and pay-once services.  Periodically, the service object will decide
that it needs to make a charge.  Charges are added to the current journal, and
a transfer is made from the consumer's bank to the consumer.  If the consumer
has not been associated with a bank (and if no general purpose bank is
available), the consumer can't make charges.  If there are not sufficient
funds, it is responsible for issuing appropriate warnings to the use and
eventually for cutting off service.

A service such as listbox posting can ask a consumer if its banks are
sufficiently well-funder, and can deny service if not.

Consumers will generally have an event handler that fires when they're first
made.  This handler will make a request for payment by adding a new charge to
an invoice.  The invoice, when paid, will set up an initial bank for the
consumer.

=head3 Credit

Credits result from customer payments or administrator forbearance.  The user
can ask for their cash back, in the case of refundable credits, and receives a
corresponding proration of service.  A non-refundable credit might result from
a consolation prize given to the user for a service failure, or might represent
a service that we refuse to prorate, or that we cannot prorate, such as domain
registration.

=head3 Charge

A charge represents a certain amount of service that we have provided,
reducing our debit to the customer by a certain amount.

Charges may be filed into journals (for internal application of banks to
consumers, later to be displayed on receipts) or onto invoices for direct
payment by customers.

=head3 Cost tree

Charges are assmebled into cost trees.  A cost tree node is either a
charge or a rollup node which collects together several charges and
cost trees.  For example, consider a user with a pobox account and
a listbox account.  At the end of the month, their cost tree might
look like this:

     root --- pobox account ---  1 Oct 2011 charge: $ .05479
                            ---  2 Oct 2011 charge: $ .05479
                            ...
                            --- 31 Oct 2011 charge: $ .05479

          --- listbox acct  --- Setup fee : $15.00
                            --- mailings --- post #12345 : $17.30
                                         --- post #7890a : $17.225


The organization of the cost tree allows the receipt to present the
charges the way we want:

	Pobox account:
	  October		$ 1.70

	Listbox account:
	  Setup fee		$15.00
	    (setup credit)     ($15.00)

	  Posts:                $17.30  692 deliveries, Oct 18
                                $17.23  689 deliveries, Oct 29

	  Subtotal              $34.53

	TOTAL                   $36.23

=head2 Examples

At present there appear to be three sorts of consumers:

=head3 Periodically assessed services

For example, A Pobox account costs $20 per year.  We will assess this
as a $20/12 payment per month.  (Or possibly a $20/365 payment per
year?)  Each day the consumer object will receive a heartbeat event.
It will check if it has processed a charge yet this month.  If not, it
will try to process a charge against its piggy bank.  If the piggy
bank is sufficiently well-funded, that is all that is needed; the
charge is now in the right cost tree and the later receipt will inform
the customer.

If the piggy bank is not well-enough funded, the account will check to
see if there is a general fund piggy bank from which it can draw.
If not, it will check to see if there is

=head3 Pay-as-you-go services

=head3 Pay-once services

=head2 Implementation notes

=head3 Dates and times

Times at which things occur are represented by the C<Time> type, which
is implemented as a C<Moonpig::DateTime>.  This is a subclass of
C<DateTime> which changes a small amount of behavior:

=over 4

=item All C<Moonpig::DateTime> values represent UTC times.

=item The C<new> constructor allows a single argument, which is taken
to be an epoch time.  (That is, C<< Moonpig::DateTime->new( $epoch )
>> is equivalent to C<< Moonpig::DateTime->from_epoch( epoch => $epoch
) >>.

=item The overloading has been changed.  Subtracting one C<DateTime>
from another yields a C<DateTime::Duration>.   Subtracting one
C<Moonpig::DateTime> from another yields an ordinary number, the
number of epoch seconds between the two dates.

=item Corresponding to this, addition is overloaded for
C<Moonpig::DateTime> objects so that adding a C<Moonpig::Datetime> to
a number interprets the number as a number of seconds to add.  One may
also add any object that supports an C<< ->as_seconds >> method.

=item C<Moonpig::DateTime> provides C<< $a->precedes($b) >> and
C<< $a->follows($b) >> for more readable comparisons of dates.  THe
usual comparison operators are also overloaded.

=back

Time intervals are all declared as instances of a C<TimeInterval>
type, which is a plain number, represented as a number of seconds.

