
=head1 Moonpig design

=head2 Brief summary

=head2 Events

More details are in <events.pod>.

=head2 Essential entities

=head3 Ledger

A ledger wraps up an account history.  It contains the entire history
number of banks, consumers, journals, and invoices.  It singles out
the currently-active banks and consumers, and the current invoice.  It
contains contact information for the account.

=head3 Invoice

An invoice represents list of unpaid charges that the owner of the
account will be asked to pay.  Its implementation is as a charge container
(HasCharges).

=head3 Journal

A journal represents a summary of transfers made from banks to consumers over a
span of time.  It is represented as a charge container.  A journal can be
marked as closed, at which time new transfers will be recorded on a new
journal.

=head3 Consumer

A consumer represents a service for which a consumer pays.  At present there
appear to be three sorts: periodically assessed services; pay-as-you-go
services, and pay-once services.  Periodically, the service object will decide
that it needs to make a charge.  Charges are added to the current journal, and
a transfer is made from the consumer's bank to the consumer.  If the consumer
has not been associated with a bank, the consumer can't make charges.  If there
are not sufficient funds, it is responsible for issuing appropriate warnings to
the use and eventually for cutting off service.

A service such as Listbox posting can ask a consumer if its banks are
sufficiently well-funded, and can deny service if not.

Consumers will generally have an event handler that fires when they're first
made.  This handler will make a request for payment by adding a new charge to
an invoice.  The charge, when paid, will set up an initial bank for the
consumer.

=head3 Bank

A bank represents a pool of funds converted from a credit or customer
payment, and generally associated with a consumer.  The consumer will perform
transfers as needed to pay for its continued operation.

The bank has some initial value, corresponding to the amount received on
payment.  At any given moment, it has as much remaining value as its initial
value minus and transfers or holds.

=head3 Credit

Credits result from customer payments or administrator forbearance.  The user
can ask for their cash back, in the case of refundable credits, and receives a
corresponding proration of service.  A non-refundable credit might result from
a consolation prize given to the user for a service failure, or might represent
a service that we refuse to prorate, or that we cannot prorate, such as domain
registration.

=head3 Charge

A charge represents a request for funds to pay for service.  Charges are never
used in the abstract, but rather always as either invoice charges or journal
charges.

=head4 Invoice Charges

Invoice charges are filed by consumers, typically newly-created consumers, and
will be send to the user as a request for payment, or will automatically be
paid by credits on hand.

=head4 Journal Charges

Journal charge represents a certain amount of service that we have provided,
and are automatically charged by consumers against their banks.  These are not
sent to customers on invoices.  They are a purely internal means of accounting
how the customer's payments were eventually converted into service.

=head2 Subsidiary entities

=head3 Contact

Email addresses, postal addresses, credit card numbers (or proxies for
credit card numbers.)

=head3 Accountant

The Accountant is a subsystem of the ledger which is responsible for
creating and tracking transfers of funds between funds-bearing
entities such as banks, consumers, credits, and refunds.

It contains methods for selecting all the transfers that satisfy
pecified criteria, such as the set of all transfers out of a certain
bank, and for adding up the values of the transfers.

=head3 Transfer

Each transfer has a source object (typically a bank), a target object
(typically a consumer), a date, an amount of money transferred, and a
type.  The type is a string the describes the function of the
transfer.  For example, the normal transfer of money from a bank to a
consumer that occurs when the consumer enters a charge is has type
"transfer".  But the transfer from a credit to an invoice that occurs
when an invoice is paid has type "credit_application".  The accountant
will refuse to make a transfer if the transfer type does not match the
types of the source and target objects.

Transfer types are defined in C<Moonpig::TransferUtil>, which also
contains related utility functions.

When queried for transfers, accountants return TransferSets that
represent collections of transfers.  These are supposed to be opaque
objects, so please do not poke inside them.  They support methods for
querying the collection and extracting subsets.
C<< $transfer_set->all >>
returns a list of the transfers the set contains.  But if you need to
deal with transfers directly, consider adding a new TransferSet method
that does what you want.  For example, instead of using C<< ->all >> and then
looping over the transfers to calculate the total amount, there is a
C<< $transfer_set->total >> method that does this opaquely.

=head4 Holds

Some transfers are committed in two stages.  The first stage creates a
"hold" which reserves the money to be transferred so that it cannot be
transferred by someone else, and then the second stage performs the
actual transfer.  A hold can also be rolled back, aborting the
transfer and releasing the held funds for some other use.

The typical use case here is that a list owner wants to send a message
to 1,000,000 users.  The mailing software first acquires a hold for
the required amount of money, failing (and refusing to send the
message) if funds are insufficient.  Once it acquires the hold, it
puts in the order to send the message.  After the message is
delivered, the held transfer is executed; if the message delivery
failed for some later reason, the hold is released.

Example code is in C<< Consumer::ByUsage >>.  The Accountant has a
C<commit_hold> method that converts a hold into a regular transfer.
To delete a hold, use C<< Accountant->delete_transfer >> or
C<< $hold->delete >>.

=head3 Refund

A refund object records a refund that was issued to a customer.  Money
can be transferred from a credit to a refund.

=head3 Coupon

A coupon object lives in the ledger.  When it's time for the ledger to
try to apply credits to a charge, it first consults each of its
coupons about whether the coupon thinks it applies to the charge.  A
coupon that does apply will manufacture a credit to help pay the
charge.

=head2 Payment cycle

Suppose a user requests a service.  The following sequence of events
occurs for a C<ByTime> service, but is typical:

=over 4

=item 1.

The customer requests a new service.

=item 2.

A consumer is created in their ledger.

=item 3.

When the consumer is created, it receives a C<created> event which
dispatches to its C<_invoice> method.  This method immediately enters
one or more charges on the ledger's current invoice.

=item 4.

Moonpig requests payment of the invoice, which may include other
unpaid items.

=item 5.

The customer pays the invoice.  This is handled through
C<< Collection::CreditExtras->accept_payment >>, which creates the credit
and then asks the ledger to process its outstanding credits.

=item 6.

The ledger's C<process_credits> method runs through the unpaid
invoices looking for unpaid charges.  When it finds an invoice that
can be paid in full, it transfers funds from the credit or credits to
the invoice and then marks the invoice paid.  See "credit processing",
below, for more details.

=item 7.

To mark an invoice paid, the ledger sends it the C<paid> event.  The
invoice distributes this event to all of its subsidiary charges.

=item 8.

Because one of the invoice charges composes the "Bankable" role, it
creates a bank for the appropriate amount and associates it to the
consumer.

The consumer is now set up.

=item 9.

Periodically, the Ledger receves a C<hearbeat> event.  It
redistributes this event to all its components, including the
consumer.

=item 10.

The C<heartbeat> event in a consumer dispatches to the C<charge>
method.  A consumer may have a grace period during which it doesn't
charge; this is to allow customers to start receiving service right
away and to pay a little later.  But if the consumer decides it's time
to charge, it does up to three independent things:

=over 4

=item 1.

If it decides that it's likely to run out of funds soon, and it has no
replacement, it sends itself a C<consumer-create-replacement>
event. The handler for this event creates a replacement consumer.
This replacement consumer sends an invoice just as described above,
and things proceed from there.

=item 2.

If the consumer's bank is exhausted, it calls its C<expire> method.
If it has a replacement consumer, C<expire> tells the ledger that the
replacement is now managing this service.  If not, it tells the ledger
to terminate the service.

=item 3.

The consumer enters a charge on the ledger's current journal.  The
ledger's accountant uses this record when asked to compute the amount
of money still in the consumer's bank.

=back

=back

=head3 Credit processing

Periodically the ledger will try to process its credits and apply them
to outstanding charges.  At present this is kicked off by the
C<accept_payment> method on the ledger's credit collection.

=over 4

=item 1.

The method first scans over all the banks looking for "spare change":
banks with outstanding funds that are attached to expired consumers.
It transfers all the funds from these inactive banks to a fresh
credit.

=item 2.

The method then scans the unpaid invoices in order, starting with the
oldest.  It asks each of its coupons if the coupon can find any
charges on the current invoice to which it applies; if so, it has the
coupon create an additional credit that it will try to use in paying
the invoice.

=item 3.

It now adds up the applicable credits, both pre-existing and
coupon-generated, to see if they are sufficient to pay the current
invoice.

If so, it applies the credits to the invoice, transferring the funds
from the credits to the invoice, and then marks the invoice paid.  If
any of the credits were coupon-generated, the coupons are notified.
The method then goes on to the next invoice, if there is one.

If the credits are not enough to pay the invoice, the method gives up
and returns, without transferring any funds to the invoice and without
considering any further invoices.  Any coupon-generated credits are
destroyed again.

=back

=head2 External interface, XIDs

Moonpig will support a web API for ICG's other systems to make
requests of it.  Each entity external to Moonpig, such as a Pobox
account or a Listbox list member, will be assigned an external entity
id, or XID, which will be used in API requests pertaining to it.
Alternatively, API requests may use Moonpig's internal GUIDs, if it
knows them.

We have not determined the form of the XID yet, but it will look
something like "pobox:account:01234567" or "listbox:list:1:member:3".

Typical API requests include:

    GET /invoice/$XID
    GET /ledger/xid/$XID/invoices
    GET /....

        To retrieve all sorts of JSON-formatted details about all
        sorts of stuff

    PUT /ledger/xid/$XID

        Create a new ledger; request content includes details about
        initial consumers and their properties, etc.

    PUT /ledger/xid/$XID1/consumer/$XID2

        Add a consumer for entity $XID2 to the already-existing
        ledger that serves $XID1.

    POST /ledger/xid/$XID1/contact

        To update contact data

    GET  /ledger/xid/$XID/refunds
    POST /ledger/xid/$XID/refund/$refund_id

        Mark refund as having been paid, or other status update

    GET /consumer/xid/$XID/holds
    GET /consumer/xid/$XID/hold/$hold_id
    DELETE /consumer/xid/$XID/hold/$hold_id
    POST /consumer/xid/$XID/hold/$hold_id

        To recover information about extant holds and then to discard
        a particular hold or commit it and create a charge for it.

=head2 Examples

At present there appear to be three sorts of consumers:

=head3 Periodically assessed services

For example, A Pobox account costs $20 per year.  We will assess this
as a $20/12 payment per month.  (Or possibly a $20/365 payment per
year?)  Each day the consumer object will receive a heartbeat event.
It will check if it has processed a charge yet this month.  If not, it
will try to process a charge against its bank.  If the piggy
bank is sufficiently well-funded, that is all that is needed; the
charge is now in the right cost tree and the later receipt will inform
the customer.

TODO

=head3 Pay-as-you-go services

=head3 Pay-once services

=head2 Implementation notes

=head3 Environment

Moonpig executes in an I<environment>, which is a single object of
type C<Moonpig::Role::Env>.  The environment object mediates access to
the outside world, principally for testing purposes.  Examples of
intereactions mediated by the environment are logging, sending email,
and getting the current time.  Code should not use C<time()> or any
related function to get the current time; it should use C<<
Moonpig->env->now >>.

By default, Moonpig will load the "normal" environment,
C<Moonpig::Env::Normal>.  But for testing, one should inhibit this by
preloading the "test" environment.  C<Moonpig::Env::test>.  In the
test environment, send email will be delivered to a test box, for
later perusal, instead of being sent through the real email system.
The current time given by the environment can be stopped or changed.

=head3 Dates and times

Times at which things occur are represented by the C<Time> type, which
is implemented as a C<Moonpig::DateTime>.  This is a subclass of
C<DateTime> which changes a small amount of behavior:

=over 4

=item

All C<Moonpig::DateTime> values represent UTC times.

=item

The C<new> constructor allows a single argument, which is taken to be
an epoch time.  (That is, C<< Moonpig::DateTime->new( $epoch ) >> is
equivalent to C<< Moonpig::DateTime->from_epoch( epoch => $epoch ) >>.

=item

The overloading has been changed.  Subtracting one C<DateTime> from
another yields a C<DateTime::Duration>.  But subtracting one
C<Moonpig::DateTime> from another yields an ordinary number, the
number of epoch seconds between the two dates.

=item

Corresponding to this, addition is overloaded for C<Moonpig::DateTime>
objects so that adding a C<Moonpig::Datetime> to a number interprets
the number as a number of seconds to add.  One may also add any object
that supports an C<< ->as_seconds >> method.

=item

C<Moonpig::DateTime> provides C<< $a->precedes($b) >> and
C<< $a->follows($b) >> for more readable comparisons of dates.

=back

Time intervals are all declared as instances of a C<TimeInterval>
type, which is a plain number, represented as a number of seconds.

=head3 Money

All money is accounted in exact integral numbers of "millicents".  One
millicent ('mc') is 1/1000 of a cent, or 1e-5 dollars.

Charges for non-integral amounts are rounded B<down> to the nearest
millicent, giving the customer the benefit of the roundoff error, such
as it is.  An account that costs $20.00 per year is typically charged
in 365 daily increments of 5749 mc each, totalling $19.99 and 835mc.
The customer gets about 1/6 of a cent for free.

Unadorned numeric values are taken to be in millicents.
C<Moonpig::Util> provides  C<dollars> and C<cents> functions to
construct dollar and cent amounts.  For example, 150000,
C<dollars(1.50)>, and C<cents(150)> are all the same amount of money.

Many money attributes are required to be positive amounts.  For
example, you cannot create a bank that contains a negative or zero
amount of money, or transfer a negative or zero amount of money from
anywhere to anywhere.

=head3 TransferSets

Internally, these are simply arrays of transfers.  An earlier
implementation created them as iterators, which I<might> make sense
for ledgers with extremely large numbers of transfers.  If you think
you need an iterator implementation, see commit
6308071566b618badfd4d6aa1183cba1d3ff5d33.

=head2 Authors

Ricardo SIGNES, C<rjbs@icgroup.com>
Mark Jason DOMINUS, C<mjd@icgroup.com>

