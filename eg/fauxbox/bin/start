#!/usr/bin/env perl
use strict;
use warnings;

use File::Path qw(remove_tree);
use File::Spec;
use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
  'Usage: %c %o',
  [ 'new-db|N' => 'create a new set of working files' ],
);

$ENV{FAUXBOX_ROOT} = 'eg/fauxbox';
my $db_path = File::Spec->catdir($ENV{FAUXBOX_ROOT}, 'var');

if ($opt->new_db) {
  print "deleting old databases...\n";
  remove_tree($db_path);
}

mkdir $db_path unless -d $db_path;

my $colorize = "2>&1 | $ENV{FAUXBOX_ROOT}/bin/color";

my $mp_pid = fork;
$mp_pid or do {
  exec "plackup -I lib -p 5001 $ENV{FAUXBOX_ROOT}/bin/moonpig.psgi $colorize cyan"
};

my $ul_pid = fork;
$ul_pid or do {
  $ENV{FAUXBOX_MOONPIG_URI} = 'http://localhost:5001';
  exec "plackup -I lib -p 5000 $ENV{FAUXBOX_ROOT}/bin/fauxbox.psgi $colorize yellow";
};

my $d_pid = fork;
$d_pid or do {
  $ENV{MOONPIG_URI} = 'http://localhost:5001';

  use Path::Class;
  my $dir = dir('share')->absolute->stringify;
  my $use = qq[use Test::File::ShareDir 0.003001 -share => { -dist => { q{Moonpig} => q{$dir} } };];

  exec "plackup -I lib -I eg/fauxbox/lib -p 5002 -MFauxbox::Moonpig::Env -e '$use' share/dashboard/dashboard.psgi $colorize green";
};

$SIG{INT} = sub { kill 0, 2 };

1 until wait == -1;
