#!/usr/bin/env perl
use strict;
use warnings;

use lib 'eg/fauxbox/lib';

use File::Path qw(remove_tree);
use File::Spec;
use JSON;
use LWP::UserAgent;

$ENV{FAUXBOX_ROOT} = 'eg/fauxbox';
my $db_path = File::Spec->catdir($ENV{FAUXBOX_ROOT}, 'var');

$ENV{FAUXBOX_STORAGE_ROOT} = $db_path;

require Fauxbox::Schema;

die "db path $db_path does not exist as dir\n" unless -d $db_path;

my $schema = Fauxbox::Schema->shared_connection;

my $account_rs = $schema->resultset('Account')->search;

my $ua = LWP::UserAgent->new;
my $JSON = JSON->new;

while (my $account = $account_rs->next) {
  my $xid = sprintf 'fauxbox:account:%u', $account->id;
  my $res = $ua->get("http://localhost:5001/ledger/xid/$xid");
  next if $res->is_success;

  if ($res->code == 404) {
    print "account $xid not fount\n";
  } else {
    print "error finding $xid: " . $res->as_string;
    next;
  }

  my $payload = $JSON->encode({
    template      => 'fauxboxbasic',
    template_args => {
      xid         => 'fauxbox:account:' . $account->id,
      make_active => 1,
    },
  });

  my $client_xid = sprintf 'fauxbox:username:%s', $account->client->username;
  my $create_res = $ua->post(
    sprintf('/ledger/xid/%s/consumers', $client_xid),
    'Content-Type' => 'application/json',
    Content => $payload,
  );
}
