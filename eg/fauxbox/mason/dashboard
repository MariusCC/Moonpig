%# vim:set ft=mason:
<%args>
$username
</%args>
<%init>
require Moonpig::App::Ob::Dumper;
Moonpig::App::Ob::Dumper->import('Dump');
my $client = $m->schema->resultset('Client')->find({ username => $username });
my $ledger_path = "/ledger/xid/" . username_xid($username);
my $ledger = $m->mp_request(GET => $ledger_path);
</%init>

<h2>Your Dashboard!</h2>
<h3>currently logged in as <% $client->username %>

<h3>Ledger</h3>
<pre>
<% Dump($ledger) |h %>
</pre>

<& SELF:tick, ledger_path => $ledger_path,
              return_url => "/dashboard?username=$username" &>

<& SELF:payment-due,  client => $client, ledger_path => $ledger_path &>

<& SELF:account-list, client => $client &>

<& SELF:account-form, client => $client &>

<%method tick>
<%args>
$ledger_path
$return_url
</%args>

<form action='/post/elapse' method='post'>
Let <% $m->widget->input({ size=>2, value=>1, id => 'days' }) %> day(s) elapse
<% $m->widget->hidden({ name => "return_url", value => $return_url }) %>
<% $m->widget->hidden({ name => "ledger_path", value => $ledger_path }) %>
<% $m->widget->submit({ value => "now!" }) %><br />
</form>
</%method>

<%method payment-due>
<%args>
$client
$ledger_path
</%args>
<%perl>
my $invoices = $m->mp_request(GET => "$ledger_path/invoices/unpaid");
my @invoice_guids = map {; $_->{guid} } @{$invoices || []};
# my $total = reduce {$a+$b}, 0, map { $_->total_amount } $last_rfp->invoices;
# return unless $last_rfp and $total > 0;
</%perl>

<h2>unpaid invoices</h2>
% for my $inv_guid (@invoice_guids) {
%   my $invoice = $m->mp_request(GET => "$ledger_path/invoices/guid/$inv_guid");
<h3><% $inv_guid %></h3>
<pre><% Dump($invoice) | h %></pre>
% }

<form action='/post/make-payment' method='post'>
  Accept payment of: $
  <% $m->widget->input({ id => 'payment.amount' }) %><br />
  <% $m->widget->hidden({ id => 'payment.client_id', value => $client->id }) %>
  <% $m->widget->submit %>
</form>
</%method>

<%method account-list>
<%args>
$client
</%args>
<%perl>
my @accounts = $client->accounts;
if (@accounts) {
  print "<ul>\n";
  $m->request_comp->call_method('account-summary', account => $_) for @accounts;
  print "</ul>\n";
} else {
  print "<p>You have no accounts</p>\n"
}
</%perl>
</%method>

<%method account-summary>
<%args>
$account
</%args>
<li>
% print join(' âžœ ', $account->alias, $account->fwd);
% if ($account->is_premium) {
  (premium!)
% } else {
  <form action='/post/add-premium' method='post'>
  <% $m->widget->hidden({ id => 'account.id', value => $account->id }) %>
  <% $m->widget->submit({ value => 'Add Premium' }) %>
  </form>
% }
<form action='/post/cancel-account' method='post'>
  <% $m->widget->hidden({ id => 'account.id', value => $account->id }) %>
  <% $m->widget->submit({ value => 'Cancel' }) %>
</form>
</li>
</%method>

<%method account-form>
<%args>
$client
</%args>
<form action='/post/add-account' method='post'>
  Mail from    <% $m->widget->input({ id => 'account.alias' }) %>
  should go to <% $m->widget->input({ id => 'account.fwd' }) %>
  <br />
  <% $m->widget->hidden({ id => 'account.client_id', value => $client->id }) %>
  <% $m->widget->submit({ id => 'account.premium', value => 'Add Premium' }) %>
  <% $m->widget->submit({ value => 'Add Cheapo' }) %>
</form>
</%method>
